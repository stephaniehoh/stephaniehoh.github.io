<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[stephanie writes code]]></title>
  <link href="http://stephaniehoh.github.io/atom.xml" rel="self"/>
  <link href="http://stephaniehoh.github.io/"/>
  <updated>2013-10-18T02:10:31-04:00</updated>
  <id>http://stephaniehoh.github.io/</id>
  <author>
    <name><![CDATA[Stephanie Oh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.zip and Hash[] are Really Handy]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/18/dot-zip-and-hash-are-really-handy/"/>
    <updated>2013-10-18T01:07:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/18/dot-zip-and-hash-are-really-handy</id>
    <content type="html"><![CDATA[<p>We&rsquo;re wrapping up week 4 at the Flatiron School and&hellip; I&rsquo;m starting to work on a fun gem idea! Yes, I&rsquo;ve been inspired by my classmates to take the plunge and build my own Ruby gem.</p>

<p>But first things first. I need data in order for my gem to be useful. So earlier today (well, yesterday, at this point) &mdash; I proceeded to scrape some data. And in the process, I discovered a neat pair of methods that work very nicely together: .zip and Hash[].</p>

<h4>WHAT DOES .ZIP DO?</h4>


<p>The .zip method basically joins two arrays together, pairing elements from each that have matching indexes and returning the whole thing as a big array that contains mini-arrays populated with the newly paired elements. You set one of the arrays as the receiver of the method, which then takes the second array as an argument. It looks something like this:</p>

<p><code>array1.zip(array2)</code></p>

<p>Not too complicated, right?</p>

<p>Here it is in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">array2</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;orange&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">array1</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">array2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;apple&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;orange&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<br>




<h4>WHAT DOES HASH[] DO?</h4>


<p>The Hash[] class method is SO cool. You can basically dump the whole <code>array1.zip(array2)</code> sequence inside of the [brackets], like so:</p>

<p><code>Hash[array1.zip(array2)]</code></p>

<p>What do you think this will result in?</p>

<p>Only one way to find out!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">array2</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;orange&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Hash</span><span class="o">[</span><span class="n">array1</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">array2</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="mi">1</span><span class="o">=&gt;</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">=&gt;</span><span class="s2">&quot;orange&quot;</span><span class="p">,</span> <span class="s2">&quot;3=&gt;banana&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<p>How crazy awesome is that?! It returned a hash and populated it with key-value pairs made out of the elements from each array that have matching index numbers.</p>

<p>So the .zip and Hash[] methods, together, proved very useful indeed as I scraped data from Billboard.com and was able to get <code>artists</code> and <code>songs</code>, separately, to look like a numbered list of the pair, <code>artist - song</code>. And that&rsquo;s all I&rsquo;m saying about my gem-in-progress, for now!</p>

<p>I &lt;3 Ruby.</p>

<h4>KEY TAKEAWAYS</h4>


<ol>
<li>You can join two arrays together and return matching-index pairs using <code>array1.zip(array2)</code></li>
<li>You can create a hash populated with key-value pairs made out of two arrays using <code>Hash[array1.zip(array2)]</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lost in Translation - 'Till You Normalize]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/12/lost-in-translation-till-you-normalize/"/>
    <updated>2013-10-12T23:33:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/12/lost-in-translation-till-you-normalize</id>
    <content type="html"><![CDATA[<p>This is something you&rsquo;re going to hear a lot over the course of your Ruby journey: &ldquo;NORMALIZE YOUR DATA&rdquo;. But what does this mean?</p>

<p>Between humans, the concept of &ldquo;normal&rdquo; is typically (and overly-simplistically) understood to connote, &ldquo;not weird&rdquo;. As in, if you&rsquo;re normal, then by default you are not a total weirdo (/ˈwi(ə)rdō/ 1. A person regarded as being very strange or eccentric 2. A deranged, potentially dangerous person. I suppose, however, that derangement and danger are not limited to just people).</p>

<p>In Ruby, on the other hand, &ldquo;normal&rdquo; &mdash; or rather, &ldquo;normalized&rdquo; &mdash; carries a very different meaning. The latter is mostly used to describe data (i.e strings, numbers, etc.) that has been transformed and accounted for in such a way that it is now easier to compare it against other data. It&rsquo;s kind of like assuring that nothing will be &ldquo;lost in translation&rdquo;. In fact, it&rsquo;d be a little like having a handy translator on hand (ha! no pun inten&hellip;) that can translate &mdash; in real time &mdash; whatever you&rsquo;re saying out loud in English to another language. And this might save your @$$ when you&rsquo;re trying to communicate to a room full of non-English speakers. IN FACT, when we humans translate stuff, we are, essentially, NORMALIZING it!</p>

<p>Actually, I just thought of the best analogy of all: <u>it&rsquo;s making things &ldquo;apples to apples&rdquo;</u>. We couldn&rsquo;t run around comparing apples to oranges now, could we?!</p>

<p><img src="http://www.foodrenegade.com/wp-content/uploads/2013/04/apples-a-year-old.jpg"></p>

<h4>SOME COMMON METHODS USED TO &#8216;NORMALIZE&#8217; DATA:</h4>


<p><code>.upcase</code> (capitalizes a string)<br>
<code>.downcase</code> (lower-cases a string)<br>
<code>.reverse</code> (reverses a string)<br>
<code>.sort</code> (sorts an array in ascending order, by default)<br>
<code>.split()</code> (splits a string per whatever you specify as an argument)<br>
<code>.gsub()</code> (substitutes all instances of one thing to another)<br></p>

<h4>SOME COMMON RUBY PROBLEMS THAT REQUIRE &#8216;NORMALIZATION&#8217;:</h4>


<p>&ldquo;Does Some_Array Contain an Anagram of a Given Word?&rdquo; (can be nicely solved using <code>.sort</code>)<br>
&ldquo;Is This_Sentence a Palindrome?&rdquo; (might need a little<code>.downcase</code>, <code>.gsub</code> and <code>.reverse</code> action)<br>
&ldquo;Deaf Grandma!&rdquo; (a rare one that calls upon <code>.upcase</code>!)<br>
Dealing with user input in general via &lsquo;gets.chomp&rsquo; or &lsquo;gets.strip&rsquo; (always add a <code>.downcase</code> for good measure!)</p>

<p>Why that last piece of advice? Because every user on the planet can&rsquo;t be trusted to input his or her data accurately, every time. So &lsquo;normalizing&rsquo; this input by calling <code>.downcase</code> on it ensures that you&rsquo;ve accounted for any capitalization inconsistencies. You can now better compare apples to apples.</p>

<h4>KEY TAKEAWAYS</h4>


<ol>
<li>&lsquo;Normalizing&rsquo; your data means transforming its appearance slightly so that your program knows it&rsquo;s comparing apples to apples</li>
<li>Some common methods you can use to normalize data include:<br>
<code>.upcase</code><br>
<code>.downcase</code><br>
<code>.reverse</code><br>
<code>.sort</code><br>
<code>.split</code><br>
<code>.gsub</code><br></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Using ||=]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/11/refactoring-using-%7C%7C-equals/"/>
    <updated>2013-10-11T10:14:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/11/refactoring-using-||-equals</id>
    <content type="html"><![CDATA[<p>I wanted to write up a short addendum to my previous post, &ldquo;Ruby: Just Set It. Just Say It&rdquo; and show you a simple example of refactoring.</p>

<p>What is refactoring, you ask?</p>

<p>In my mind, it&rsquo;s a little like editing your writing. Your first draft might be an incoherent mess, but at least you got your thoughts out. From there, it&rsquo;s your responsibility as a writer to clean up your work so that it best conveys what you mean to say FROM YOUR READERS&#8217; PERSPECTIVE. Likewise, refactoring your code is a kind of clean-up process. It shouldn&rsquo;t change your program&rsquo;s external behavior, i.e the final output shouldn&rsquo;t be changing, but HOW your program gets there should have effectively changed.</p>

<p>I guess this is a little different than editing your writing, in that the former is to better serve the consumer &mdash; the reader; refactoring code, on the other had, doesn&rsquo;t yield any new outcome to the consumer &mdash; the user. However, refactoring does make your code more readable to OTHER CODERS. Which can ultimately mean that future de-bugging efforts will be less painful. That, and you should take pride in your code! Make it as readable, logical, and elegant as possible &mdash; you wouldn&rsquo;t do any differently in your writing, would you??</p>

<p>With that said, here&rsquo;s a side-by-side comparison of my code for the pigeon organizer exercise, pre and post refactoring:</p>

<h4>PRE-REFACTORING, USING &#8216;IF ELSE&#8217; LOGIC</h4>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pigeon_list</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pigeon_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">property</span><span class="p">,</span> <span class="n">property_hash</span><span class="o">|</span>
</span><span class='line'>  <span class="n">property_hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">values</span><span class="p">,</span> <span class="n">birds_array</span><span class="o">|</span>
</span><span class='line'>    <span class="n">birds_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">property</span><span class="o">]</span>
</span><span class='line'>          <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">property</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">values</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">property</span><span class="o">]</span> <span class="o">=</span> <span class="n">values</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">property</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">values</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h4>POST-REFACTORING, USING THE ||= OPERATOR</h4>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arranged_pigeon_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pigeon_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="p">,</span> <span class="n">value_hash</span><span class="o">|</span>
</span><span class='line'>  <span class="n">value_hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">traits</span><span class="p">,</span> <span class="n">names_array</span><span class="o">|</span>
</span><span class='line'>    <span class="n">names_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">arranged_pigeon_hash</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{</span> <span class="n">attribute</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">traits</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">arranged_pigeon_hash</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">||=</span> <span class="n">traits</span>
</span><span class='line'>          <span class="n">arranged_pigeon_hash</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">attribute</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">traits</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The outcome is the same either way, but the refactored version saves me a few lines of code and ultimately captures the logic behind the solution better.</p>

<p>What the ||= operator does, in a nutshell, is evaluates whatever&rsquo;s on the LEFT side of the operator first. If that condition returns &lsquo;true&rsquo;, then the program proceeds to the next line of code, and so on. If the condition is &lsquo;false&rsquo;, then whatever&rsquo;s on the RIGHT side of the operator is assigned as the value of the left side.</p>

<p>Cool, right?!</p>

<h4>KEY TAKEAWAYS</h4>


<ol>
<li>Write code that works first. Then refactor it.</li>
<li>Refactoring should&rsquo;t change the final outcome of your program; it should just help your program get there more efficiently, and make your code more readable to OTHER CODERS</li>
<li>The ||= (&ldquo;or or equals&rdquo;) operator is a cool alternative to using &lsquo;if else&rsquo; logic, if you intend for some part of your program to handle new assignment (i.e values to keys, etc.)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Just Set It. Just Say It.]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/10/ruby-just-set-it-just-say-it/"/>
    <updated>2013-10-10T01:57:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/10/ruby-just-set-it-just-say-it</id>
    <content type="html"><![CDATA[<p>When we&rsquo;re fluent in a language, we take for granted everything about it that feels intuitive. Ever feel that way when asked something specific about English? Say you had to conjure up some intelligent explanation for why certain verbs conjugate irregularly while others don&rsquo;t. You&rsquo;d probably say something like, &ldquo;I don&rsquo;t know! I just know that they do. I&rsquo;ve always known. If you know English, it&rsquo;s like&hellip; intuitive.&rdquo;</p>

<p>You just know.</p>

<p>Well, until you decide to pick up a foreign language and start the language-learning process from scratch, you have no idea now valuable and hard-earned this intuition is. To have a SENSE of how a language works, how you can play by its rules but still bend it to your will and imagination&hellip; this is what fluency feels like. And it feels awesome, because you can really express yourself.</p>

<p>The alternative, of course, can feel really really frustrating &mdash; and this has been a prevalent feeling so far in my quest to learn to &lsquo;speak&rsquo; Ruby. Everything feels unnatural. I find myself writing most of my code out in the form of pseudo-code, wishfully hoping all the steps I&rsquo;ve typed out in plain English will magically transform themselves into Ruby. Come on, you mean the computer CAN&rsquo;T interpret that? WHY THE HELL NOT.</p>

<p>Anyway. Rather than throw a tantrum (and believe me, sometimes nothing sounds better than a good tantrum), I suppose it&rsquo;d be more productive for me to share a few Ruby intuition-isms (?) that I&rsquo;ve finally picked up on these last few days.</p>

<h3>HOW DO YOU DEAL WITH `.collect`?!</h3>


<p>By this, I don&rsquo;t mean how do you USE <code>.collect</code>, per se. Just to be clear though, <code>.collect</code> iterates over a data-structure (array or hash) and then, based on what else you&rsquo;ve told it to do in your code block, it returns a newly-generated array of all the affected, <code>.collect</code>ed items. Cool. What used to really puzzle me, however, was how the hell you further accessed and/or passed around the fruits of this <code>.collect</code>ed array&rsquo;s labors. For example, look at this (admittedly wonky-looking) method that uses `.collect&#8217;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ===== Apple-picker using &#39;.collect&#39; ====== #</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">apple_picker</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">fruit</span><span class="o">|</span>
</span><span class='line'>    <span class="n">fruit</span> <span class="k">if</span> <span class="n">fruit</span> <span class="o">==</span> <span class="s2">&quot;apple&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>See how I tacked on a <code>.compact</code> LITERALLY on the end of the &lsquo;end&rsquo;? I know &mdash; IT LOOKS SO WEIRD. But the real point is, it looks like it&rsquo;s over once I wrap up my &lsquo;do&rsquo; and &lsquo;end&rsquo;. Kaput. No more access to whatever that entire block of code just returned. WHAT IF I WANTED TO DO MORE? Like, how can I make the <code>.collect</code>&rsquo;s return value a THING? Oh, #NBD. Avi finally drilled home for me today this concept: thats_what_variables_are_for = &ldquo;storing and pointing to things!&rdquo; So look. If I wanted to store the fruits of <code>.collect</code>&rsquo;s labor somewhere, I literally JUST SET THE WHOLE BLOCK AS = TO A VARIABLE. Like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ===== Apple-picker using &#39;.collect&#39; ====== #</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">apple_picker</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">some_variable</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">fruit</span><span class="o">|</span>     <span class="c1"># &lt;-- LOOK! I JUST SET THE &#39;EQUAL TO&#39; BIT RIGHT HERE</span>
</span><span class='line'>    <span class="n">fruit</span> <span class="k">if</span> <span class="n">fruit</span> <span class="o">==</span> <span class="s2">&quot;apple&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! It&rsquo;s that easy. And now, some_variable effectively &lsquo;houses&rsquo; the result of <code>.collect</code>.</p>

<p>Oh, and by the way &mdash; since <code>end.compact</code> looks silly, here the better way to write that using curly braces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ===== Apple-picker using &#39;.collect&#39; ====== #</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">apple_picker</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">fruit</span><span class="o">|</span> <span class="n">fruit</span> <span class="k">if</span> <span class="n">fruit</span> <span class="o">==</span> <span class="s2">&quot;apple&quot;</span><span class="p">}</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<br>




<h3>HOW DO YOU, LIKE, CHECK IF SOMETHING ALREADY EXISTS?</h3>


<p>This one was a huge epiphany for me. Like HUGE. Of epic proportion. Because NOT knowing this stumped me on basically every problem I had to solve that required &lsquo;leveling out&rsquo; my iteration. Look at this first attempt to organize a hash of pigeons, for example, without explicitly &lsquo;leveling out&rsquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pigeon_list</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pigeon_names</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">pigeon_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">descriptors</span><span class="p">,</span> <span class="n">details_hash</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pigeon_names</span> <span class="o">=</span> <span class="n">details_hash</span><span class="o">.</span><span class="n">each_value</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">pigeon_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">descriptors</span><span class="p">,</span> <span class="n">details_hash</span><span class="o">|</span>
</span><span class='line'>  <span class="n">details_hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">qualities</span><span class="p">,</span> <span class="n">names_array</span><span class="o">|</span>
</span><span class='line'>    <span class="n">names_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">pigeon_names</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>                      <span class="c1"># &lt;-- THE ISSUE IS AROUND HERE</span>
</span><span class='line'>        <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">descriptors</span> <span class="o">=&gt;</span> <span class="n">qualities</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">pigeon_list</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above code, my iterator is ultimately only returning the last line of the block that&rsquo;s evaluated, over-writing data with each iteration &mdash; i.e, it keeps re-populating my hash with over-writes, rather than &lsquo;leveling out&rsquo; and catching all the data. The problem, I discovered, was that I NEEDED TO ACCOUNT FOR WHETHER OR NOT SOMETHING ALREADY EXISTS. And how do you do that? YOU JUST STATE IT. Here it is in action below, in the refactored solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pigeon_list</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pigeon_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">property</span><span class="p">,</span> <span class="n">property_hash</span><span class="o">|</span>
</span><span class='line'>  <span class="n">property_hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">values</span><span class="p">,</span> <span class="n">birds_array</span><span class="o">|</span>
</span><span class='line'>    <span class="n">birds_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>                     <span class="c1"># &lt;-- TO CHECK IF IT EXISTS? JUST STATE IT</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">property</span><span class="o">]</span>         <span class="c1"># &lt;-- RIGHT HERE I ASK AGAIN IF SOMETHING EXISTS</span>
</span><span class='line'>          <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">property</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">values</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">][</span><span class="n">property</span><span class="o">]</span> <span class="o">=</span> <span class="n">values</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">pigeon_list</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">property</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">values</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">pigeon_list</span>
</span></code></pre></td></tr></table></div></figure>


<p>See how easy that is? Your instinct, based on English, might be to make up some random &lsquo;questions&rsquo; to ask the entity like <code>if pigeon_list[name].exists?</code> or <code>.already_exists?</code> &mdash; but THIS IS RUBY. You don&rsquo;t need to ask any questions. YOU LITERALLY JUST STATE THE ENTITY.</p>

<p>So simple. But mind still blown.</p>

<h4>KEY TAKEAWAYS</h4>


<ol>
<li>Ruby is a pretty English-y language, but it&rsquo;s not ACTUALLY English (so don&rsquo;t expect such)</li>
<li>To &lsquo;catch&rsquo; the return value(s) of a <code>.collect</code>, simply SET THE ENTIRE BLOCK AS EQUAL TO A VARIABLE (and now it lives in the variable!)</li>
<li>To &lsquo;level&rsquo; out your iteration and avoid re-populating with over-writes, you need to check if certain entities (i.e an array) exist already&hellip; and how to check? YOU JUST STATE THE ENTITY ITSELF</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Your Units of Work Manageable]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/09/keeping-your-units-of-work-manageable/"/>
    <updated>2013-10-09T00:33:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/09/keeping-your-units-of-work-manageable</id>
    <content type="html"><![CDATA[<p>The parallels between good (English) writing and good code continue to abound, and one that really stood out to me today was the idea that <strong>methods are like paragraphs</strong>.</p>

<p>Just think about it.</p>

<p>Any work of writing worth your dime (screenplays and plays don&rsquo;t really count in this example) &mdash; be it an op-ed piece, a serious article, or a novel &mdash; can be broken down into smaller and smaller units until you&rsquo;re staring at individual letters and punctuation marks. Now, a slightly more meaningful unit of work than individual letters and characters is a sentence, and I&rsquo;d say the next unit up after a sentence is by and large the most meaningful of all: the paragraph.</p>

<p>Aside from needing to be well-written in general, conceptually, good paragraphs should <strong>adhere to a single topic</strong>. That is the point of a paragraph: to broach, discuss, debate, or refute ONE MAIN IDEA. And if you find yourself babbling about new or irrelevant ideas, it&rsquo;s probably time for &mdash; you guessed it &mdash; a new paragraph. Paragraphs help us compartmentalize our thoughts so we can build upon them in a logical manner; they&rsquo;re kind of like lego pieces that we can eventually stack together to build something cool. Conversely, how could you build anything <em>without</em> these pieces?? I HAVE NO IDEA. How miffed would you be if you had to build a house with one massive brick? Or how pissed have I been when previous writing students submitted &ldquo;papers&rdquo; that were comprised of ONE MASSIVE BLOCK OF TEXT?</p>

<p>Paragraphs make your work &mdash; as both the writer AND the reader &mdash; more manageable. And I think this is such a key concept in writing code, as well.</p>

<p>Methods, like paragraphs, are units of work. And these units of work need to be kept manageable, so as to make your life as a programmer (and potential reader of other programmers&#8217; code) less painful. How are you going to debug effectively if you&rsquo;re staring at one massive block of code? How can you tell where your errors truly begin and end if your entire program depends on ONE GIANT CHAIN OF METHODS?? I don&rsquo;t know.</p>

<p>Even if you&rsquo;re still having a hard time grasping how crucial this idea is, or if you don&rsquo;t know the first thing about writing code, any layperson with a pair of eyes can see the stark differences between the following two examples of code.</p>

<h4>Here&#8217;s the first version:</h4>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Jukebox</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:songs</span>
</span><span class='line'>  <span class="no">APPROVED_COMMANDS</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:list</span><span class="p">,</span> <span class="ss">:help</span><span class="p">,</span> <span class="ss">:exit</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">songs</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@songs</span> <span class="o">=</span> <span class="n">songs</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">s</span><span class="p">)}</span>
</span><span class='line'>    <span class="vi">@on</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on?</span>
</span><span class='line'>      <span class="vi">@on</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">help</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Please select help, list, exit, or play.&quot;</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">command_request</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">command</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">APPROVED_COMMANDS</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">input</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">input</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;play&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">song_request</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;play&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="n">song_request</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Invalid command&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">call</span>
</span><span class='line'>      <span class="k">while</span> <span class="nb">self</span><span class="o">.</span><span class="n">on?</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">help</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">exit</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Goodbye!&quot;</span>
</span><span class='line'>      <span class="vi">@on</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">command_request</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="nb">gets</span><span class="o">.</span><span class="n">strip</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h4>Here&#8217;s the second version (of the same program):</h4>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Jukebox</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:songs</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">songs</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@songs</span> <span class="o">=</span> <span class="n">songs</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Welcome to Pop Jukebox!&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Enter a command to continue. Type &#39;help&#39; for a list of commands.&quot;</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">exit</span> <span class="o">==</span> <span class="kp">false</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">command</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="n">command</span>
</span><span class='line'>      <span class="k">when</span> <span class="s1">&#39;help&#39;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Enter one of the following commands: help, play, list, exit&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">when</span> <span class="s1">&#39;list&#39;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="nb">self</span><span class="o">.</span><span class="n">songs</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Type play to proceed&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">when</span> <span class="s1">&#39;play&#39;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Would you like to play by song title or artist?&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">song_title_or_artist</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">song_title_or_artist</span>
</span><span class='line'>        <span class="k">when</span> <span class="s1">&#39;song title&#39;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="n">list_song_titles</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Please select a song&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="n">song_choice</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>          <span class="n">play_song_choice</span><span class="p">(</span><span class="n">song_choice</span><span class="p">)</span>
</span><span class='line'>        <span class="k">when</span> <span class="s1">&#39;artist&#39;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="n">list_artists</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Please select an artist&quot;</span>
</span><span class='line'>          <span class="n">artist_choice</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>          <span class="n">list_artist_songs</span><span class="p">(</span><span class="n">artist_choice</span><span class="p">)</span>
</span><span class='line'>          <span class="n">song_choice</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>          <span class="n">play_song_choice</span><span class="p">(</span><span class="n">song_choice</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Enter one of the following commands: help, play, list, exit&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">when</span> <span class="s1">&#39;exit&#39;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Goodbye! Nice to know ya.&quot;</span>
</span><span class='line'>        <span class="nb">exit</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Say whaaaaaa?&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">list_artists</span>
</span><span class='line'>    <span class="n">artists</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>      <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; - &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">list_song_titles</span>
</span><span class='line'>    <span class="n">song_titles</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>      <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; - &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_song_choice</span><span class="p">(</span><span class="n">song_choice</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; - &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">downcase</span> <span class="o">==</span> <span class="n">song_choice</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Now playing </span><span class="si">#{</span><span class="n">song</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">list_artist_songs</span><span class="p">(</span><span class="n">artist_choice</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; - &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">downcase</span> <span class="o">==</span> <span class="n">artist_choice</span>
</span><span class='line'>       <span class="c1"># then just show that artist&#39;s song</span>
</span><span class='line'>       <span class="nb">puts</span> <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; - &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Select song&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I mean, just from a VISUAL standpoint, it doesn&rsquo;t take rocket science to see that one of the two versions seems to be less&hellip; verbose. It seems to rely on small, focused methods that each serve a single purpose and are accessed/called upon by other methods, when needed. This is achieved through something called <strong>method delegation</strong>, where methods pass responsibility along from one to the next, initiating different parts of the program swiftly and efficiently.</p>

<p>Of course, the responsibility of the fledgling Rubyist is to focus on &lsquo;making it work&rsquo; first, then worry about &lsquo;making it beautiful&rsquo;. But somehow, I think considering form and function both is a valuable approach as well. Because if you&rsquo;re thinking in small pieces, and you KNOW that writing code in small pieces is a good thing, then you should have no trouble&hellip; <em>writing code in small pieces</em>.</p>

<h4>KEY TAKEAWAYS</h4>


<ol>
<li>Methods are like paragraphs &mdash; give them one &lsquo;topic sentence&rsquo;, i.e function, at a time</li>
<li>A paper written as one big block of text is egregious&hellip; and so is code that relies on one unwieldy method</li>
<li>Make your methods small and focused &mdash; you can always call them in other methods!</li>
<li>Method delegation is your friend</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doing Things with Enumerables Using Verbs... Well, Methods]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/08/doing-things-with-enumerables-using-verbs-dot-dot-dot-well/"/>
    <updated>2013-10-08T03:28:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/08/doing-things-with-enumerables-using-verbs-dot-dot-dot-well</id>
    <content type="html"><![CDATA[<p>A big thing for me as I make the transition away from my former life as an English and writing instructor is to make sense of coding by relating it to familiar concepts by means of analogy.</p>

<p>So a big thing in Ruby is <b>methods</b>. Thus far, I&rsquo;ve been thinking about methods <b>as if they were verbs in English</b> &mdash; just like verbs describe actions, so methods let us act upon and DO things with objects.</p>

<p>Now, a particular type of object called <b>Enumerables</b> has caused me some grief this past week, as it seems you can call upon an Enumerable an infinite list of methods. What are some examples of Enumerables? Well, basically any data structure that holds data and is therefore useful in Ruby &mdash; two common ones being <b>arrays and hashes</b>. And thanks to David Grayson&rsquo;s Las Vegas Ruby Group presentation, <a href="https://speakerdeck.com/lvrug/rubys-enumerable-module-david-grayson">&ldquo;Ruby&rsquo;s Enumerable Module&rdquo;</a>, I now know that ranges, sets, String#chars, and String#bytes are also considered Enumerables.</p>

<p>Grayson&rsquo;s deck is pretty straightforward &mdash; no fluff, mostly examples of how an Enumerable might respond to or behave under a method. But this is great! Sometimes you get tired of consulting <a href="http://ruby-doc.org/core-2.0.0/">this</a> and it&rsquo;s nice to have found another source that really emphasizes <b>what the &lsquo;verbs&rsquo;, i.e methods, do</b>. Because let&rsquo;s face it. Without Enumerables and their corresponding methods, there&rsquo;s just&hellip; really not much else to do in Ruby. If you&rsquo;re not acting upon data by transforming/accessing/re-organizing/passing it around from one part of your program to another, then what are you doing? Right. And the only way you&rsquo;re going to accomplish any of the above is by taking advantage of all of Ruby&rsquo;s insane methods.</p>

<p>So the most prevalent Enumerable method that I&rsquo;d encountered way early on in my Ruby journey &mdash; dare I say the most <em>commonplace</em> or <em>well-known</em> method &mdash; is:</p>

<p><code>.each</code></p>

<p>Up until the end of last week, I tried to solve all my iteration problems using <code>.each</code>. And while the method does encompass the very spirit of iteration (how much more literal can it get than telling your program, &ldquo;I want you to consider <b>each</b> thing and do what I say to it&rdquo;???), relying on it for every scenario is like having one verb in your vocabulary and running around insisting that it should convey exactly what you mean, regardless of what it is you&rsquo;re trying to say (i.e &ldquo;play!&rdquo; to play, &ldquo;play!&rdquo; to eat, &ldquo;play!&rdquo; to sleep, &ldquo;play!&rdquo; to go home, &ldquo;play!&rdquo; to go to bed &mdash; WHY WON&rsquo;T ANYONE DO WHAT I ASK?!). It&rsquo;d be ludicrous.</p>

<p>So I expanded my Ruby vocabulary the tiniest bit and discovered a few more Enumerable iterators that are SUPER useful, including:</p>

<p><code>.collect</code> or <code>.map</code> (they do the same thing)<br>
and<br>
<code>.select</code></p>

<p>(to grasp how useful <code>.select</code> is, just take a look at <a href="https://gist.github.com/stephaniehoh/6871313">this Anagram exercise</a> I solved in class yesterday)</p>

<p>Finally, in the wee hours of this morning/night, Grayson has introduced me to a few more iterators and methods that seem potentially very useful (and I can&rsquo;t wait to try them out tomorrow):</p>

<p><code>.collect_concat</code><br>
<code>.cycle</code><br>
and<br>
<code>.group_by</code></p>

<p>The last one, <code>.group_by</code>, I&rsquo;m sure I&rsquo;ve come across before but probably forgot existed. Just being honest.</p>

<br>


<h4>KEY TAKEAWAYS</h4>


<ol>
<li>Methods are like verbs&hellip; you need to have a decent vocabulary of them, or else you&rsquo;ll be limited in how you can express yourself</li>
<li>Enumerables are pretty important in Ruby; they store data</li>
<li>Methods are also pretty important in Ruby; they let you access and manipulate the data stored in the Enumerables</li>
<li>Some cool iterators and methods you can call on Enumerables include:<br>
<code>.each</code><br>
<code>.collect</code> or <code>.map</code> (they do the same thing)<br>
<code>.select</code><br>
<code>.collect_concat</code><br>
<code>.cycle</code><br>
<code>.group_by</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git vs. GitHub for Dummies]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/07/git-vs-github-for-dummies/"/>
    <updated>2013-10-07T15:46:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/07/git-vs-github-for-dummies</id>
    <content type="html"><![CDATA[<p>I meant to write this post last week, when I had my first Git/GitHub breakthrough. In my first post &mdash; after Day 2 at Flatiron &mdash; I bemoaned the fact that everything I&rsquo;d attempted to absorb about Git and Github had, by the end of the day, turned into unpalatable git soup. A week later, after enough exposure and repetition (and causing one too many merge conflicts), I was able to strain some method out of the git soup-madness.</p>

<p>Luckily, the epiphany still seems to have stuck with me (note: I say &lsquo;luckily&rsquo;, because I&rsquo;ve been learning new things at such a breakneck pace these last two weeks that for every 5 things I learn, 4 of them are overwritten by yet MORE new things and I&rsquo;m left with just one new pearl of wisdom) &mdash; so I&rsquo;d like to share some of that epiphany with all you wonderful people.</p>

<p>Let&rsquo;s start by establishing a key concept: <b>Git and GitHub ARE NOT THE SAME THING</b>.</p>

<p>They&rsquo;re not??? But, like, programmers refer to them (seemingly) interchangeably!</p>

<p>Nope. Still not the same. They work hand in hand, but this doesn&rsquo;t equate to&hellip;. sameness.</p>

<h3>SO WHAT IS GIT?</h3>


<p>Git can seem like total madness for a number of reasons, not the least of which because&hellip; well, GitHub&rsquo;s sheer existence. The latter has added a whole slew of very niche terminology to an already-extensive list of GIT-specific terminology: i.e, there&rsquo;s more shit to memorize. Anyway, you can think of Git as <b>a really awesome version-control software.</b> <b>You download it.</b> It lives <b>locally</b> on your computer. You run it <b>from your terminal</b>. You might be typing some Git-ish commands that look like this, from your command line:</p>

<p><code>git init</code><br>
<code>git add .</code><br>
<code>git commmit -m "some witty message here"</code><br></p>

<p>If you are, then you&rsquo;re using Git &mdash; NOT GitHub.</p>

<p>And what exactly, by the way, is &ldquo;version-control software&rdquo;? It&rsquo;s basically just a handy program you install on your computer &ndash; just like when you download and install cool things like Skype &ndash; except you install Git from your command line. Which makes you really cool. Oh, and what it does: a million things. But two fundamental ideas are that:</p>

<p>1) <b>Git allows you to save different &ldquo;versions&rdquo; of your work as you go</b> &mdash; via adds and commits. As long as you&rsquo;ve installed Git on your computer and you do a <code>git init</code> in whatever directory you&rsquo;ll be doing your work, you can start saving versions of your work. And &ldquo;work&rdquo; really means anything; it could be Photoshop edits, essay drafts, spreadsheet modifications, you name it. It just so happens that if you&rsquo;re a programmer, you&rsquo;ll mostly be using Git to keep track of all your versions of code.</p>

<p>2) <b>Git lets you create and work on something called &lsquo;branches&rsquo;, which are basically parallel universes that you can switch back and forth out of interchangeably</b> &mdash; via <code>git checkout &lt;branch_name here&gt;</code>. If that&rsquo;s still confusing to you, imagine if you could make as many copies as you wanted of your EXISTENCE, i.e seven different parallel universes, and in each of them, you can run around and live out a different version of your life that you&rsquo;ve ever dreamed. When you feel like one particular universe has yielded the perfect outcome (you&rsquo;ve become the next Jay-Z, met the man of your dreams, have been elected President of the United States), you can throw away the other six and decide &ldquo;I ONLY WANT TO KEEP THE ONE WHERE I BECOME PRESIDENT.&rdquo; That&rsquo;s kind of how branches work. You get to make and work in as many as you want, and when you write code that you&rsquo;re happy with in any one of them, you can say, &ldquo;THIS IS THE BRANCH I WANT TO KEEP&rdquo; and throw the others away.</p>

<p>Then we get into merging and pushing and some advanced Git topics that I&rsquo;ll chronicle in future posts (when I&rsquo;ve actually wrapped my head around them). But this poses a natural segueway into GitHub.</p>

<h3>COOL. NOW WHAT&#8217;S GITHUB?</h3>


<p>Remember how I said Git lives locally on your computer? Well, GitHub is the exact opposite: <b>it lives remotely, on the Internet.</b> That&rsquo;s right &mdash; as its name would suggest, GitHub is an online &lsquo;hub&rsquo; that some really smart dudes built so that programmers could share their code remotely and collaborate on projects at the same time. It&rsquo;s kind of like the flashstick/Dropbox analogy &mdash; sure, the flashstick was small and compact and mostly useful, but what if you wanted to access everything on your flashstick remotely? On the Internet? Especially if, like, you didn&rsquo;t have your flashstick with you?? Sorry, no can do. Until Dropbox came along! Suddenly, you could access ALL your files from any computer, as long as you had an Internet connection and as long as you&rsquo;d explicitly added those files to Dropbox! Similarly, I like to think that GitHub is to Git what Dropbox is to the flashstick (yes, I know this is an oversimplification but if you just think about the remote-access part of the analogy, it works).</p>

<p>So if you&rsquo;ve got an Internet browser open, and you&rsquo;re typing &ldquo;www.github.com&rdquo; and hit enter, and you can see the Octocat mascot, you&rsquo;re using GitHub &mdash; NOT Git. And why is this distinction so important? Well, that&rsquo;s like asking why it&rsquo;s important to understand that the files on your computer won&rsquo;t be accessible remotely unless you MAKE them &lsquo;remote&rsquo; somehow, say, by uploading them to Dropbox. As long as you understand that <b>GitHub is a remote entity to which you&rsquo;re &lsquo;pushing&rsquo; (i.e uploading) stuff that would otherwise only exist locally</b>, you&rsquo;re in good shape.</p>

<p>This will save you a lot of confusion and heartache down the road when you&rsquo;re wondering why stuff you&rsquo;re adding and committing locally isn&rsquo;t magically appearing online on GitHub (chances are, you did a <code>git init</code> locally first then forgot to create a &lsquo;pathway&rsquo; between your computer and GitHub via <code>git remote add &lt;some GitHub URL&gt;</code>).</p>

<p>Anyway, I&rsquo;ll be doing more Git and GitHub posts down the road because I don&rsquo;t think any existing manuals on the Internet have really done an <em>excellent</em> job at illuminating how they work together (or explaining what they are, for that matter, hence this blog post). Even more egregious, in my opinion, is the lack of sensible visuals (most Git diagrams suck and have only confused me more) and the dearth in helpful analogies &mdash; so I&rsquo;ll try to provide a little of both.</p>

<h4>KEY TAKEAWAYS</h4>


<ol>
<li>Git lives locally, on your computer</li>
<li>GitHub lives remotely, on the Internet</li>
<li>You can store and access your work online, on GitHub, but only if you EXPLICITLY SEND IT THERE &mdash; i.e via a <code>git push</code></li>
<li>What you do locally on your computer doesn&rsquo;t just magically appear remotely online; you need to create the pathways and make the explicit commands</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World. It's Stephanie.]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/09/24/hello-world/"/>
    <updated>2013-09-24T22:27:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/09/24/hello-world</id>
    <content type="html"><![CDATA[<p>I completed day two at the Flatiron School today. My head is spinning with all the new concepts and terminology I&rsquo;ve been trying to absorb from the last 48 hours &mdash; deploying, raking, branching, rebasing, adding, committing, and merging. Everything is sort of merging into git-soup, at the moment.</p>

<p>But I learned some handy keyboard shortcuts that I can wrap my head&hellip; err, fingers around. Like command + tab to navigate around my open applications. And command + space to summon Spotlight. It sounds silly, but I didn&rsquo;t used to know these things. I&rsquo;ve learned more about my computer in the last two days than I ever have.</p>

<p>Goodbye, track pad?</p>

<p>Hello world.</p>
]]></content>
  </entry>
  
</feed>

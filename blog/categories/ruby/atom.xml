<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | stephanie writes code]]></title>
  <link href="http://stephaniehoh.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://stephaniehoh.github.io/"/>
  <updated>2013-12-28T22:32:17-05:00</updated>
  <id>http://stephaniehoh.github.io/</id>
  <author>
    <name><![CDATA[Stephanie Oh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Ruby 'Struct' Class]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/12/28/the-ruby-struct-class/"/>
    <updated>2013-12-28T22:29:00-05:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/12/28/the-ruby-struct-class</id>
    <content type="html"><![CDATA[<p>After months of hearing the book&rsquo;s name in mass circulation, I finally decided to get up close and personal with Sandi Metz' <em><a href="http://www.poodr.com">Practical Object-Oriented Design in Ruby</a></em>. I made this decision in part because the weeks leading up to Flatiron&rsquo;s graduation (Dec. 13th!) had been particularly Rails and JavaScript heavy, in part because this in turn had made me miss Ruby, and also in part because I felt it necessary to fortify my understanding of object-oriented programming best practices.</p>

<p>Though I&rsquo;m still in the early chapters of POODR, I can already tell this is going to be a monumental asset not only to my understanding and appreciation of Ruby, but also to my sensibilities and skills as a programmer. Most laudably, it&rsquo;s just written so damn well. Maybe too well, as <a href="http://ortask.com/book-review-poodr/">one reviewer</a> has tellingly marveled:</p>

<blockquote><p>&ldquo;I was rather surprised how, even though the book starts with simple examples, it quickly develops and builds on them to provide good explanations.&rdquo;</p></blockquote>

<p>In other words, POODR is comprehensible, digestible, and accessible. As such, it&rsquo;s <em>actually</em> an effective learning tool. Shocking!</p>

<p>Anyhow, the crux of this post is &mdash; in addition to praise for Metz' work &mdash; the Ruby <code>Struct</code> class. I came across this neat little &lsquo;class helper&rsquo;, if you will, for the first time in Chapter 2 of POODR.</p>

<br>




<h3>What is a Struct?</h3>


<p>According to the official Ruby documentation, a <a href="http://ruby-doc.org/core/classes/Struct.html">Struct</a> is &ldquo;a convenient way to bundle a number of attributes together, using accessor methods, without having to write an explicit class.&rdquo; After playing around with it a bit in pry, it feels like a quick and cheap way to create <code>Class</code>-like instances on the fly that can possess both behaviors and qualities (much like regular <code>Class</code>es). Here&rsquo;s a sample <code>Struct</code> that I&rsquo;ll build out called <code>Person</code>:</p>

<p>```ruby</p>

<p>Person = Struct.new(:name, :age, :gender) do</p>

<p>  def greet_world</p>

<pre><code>"Hello world, my name is #{name}."
</code></pre>

<p>  end</p>

<p>  def ask_question</p>

<pre><code>"What is your favorite programming language?"
</code></pre>

<p>  end</p>

<p>end</p>

<p>stephanie = Person.new(&ldquo;Stephanie&rdquo;, &ldquo;26&rdquo;, &ldquo;female&rdquo;)</p>

<p>stephanie.name          # => &ldquo;Stephanie&rdquo;
stephanie.age           # => &ldquo;26&rdquo;
stephanie.gender        # => &ldquo;female&rdquo;</p>

<p>stephanie.greet_world   # => &ldquo;Hello world, my name is Stephanie.&rdquo;
stephanie.ask_question  # => &ldquo;What is your favorite programming language?&rdquo;</p>

<p>```</p>

<p>Cool, right? Remember, the symbols you pass to your new <code>Struct</code> upon initialization &mdash; in this case <code>:name</code>, <code>:age</code>, and <code>:gender</code> &mdash; act like regular <code>attr_accessor</code>s. So I could make some alterations after the matter, like so:</p>

<p>```ruby</p>

<p>stephanie.name = &ldquo;Ruby&rdquo;
stephanie.age = &ldquo;21&rdquo;</p>

<p>stephanie.greet_world   # => &ldquo;Hello world, my name is Ruby.&rdquo;</p>

<p>```</p>

<p>&hellip;but that might be a little confusing.</p>

<p>I can now also make a bunch of new <code>Person</code>s, instantiating each one with his or her name/age/gender, and he or she will also respond to the <code>greet_world</code> and <code>ask_question</code> methods.</p>

<br>




<h3>When would you use a Struct?</h3>


<p>This is a great question. It wasn&rsquo;t immediately clear to my why or when one would use a <code>Struct</code>, especially when the more ubiquitous <code>Class</code> is always an option. According to what I&rsquo;ve read so far in POODR, it seems that using a <code>Struct</code> is one way to separate structure from meaning; it plays nicely with <code>Class</code>es, and also helps to make your methods more transparent.</p>

<p>If all of that sounded a bit vague and not yet super helpful, then it might help to look at another example wherein a <code>Struct</code> is used within a <code>Class</code> in order to break down method responsibilities and also make those methods more transparent:</p>

<p>```ruby</p>

<p>data = [[&ldquo;Stephanie&rdquo;, &ldquo;female&rdquo;], [&ldquo;Matz&rdquo;, &ldquo;male&rdquo;], [&ldquo;Sandi&rdquo;, &ldquo;female&rdquo;], [&ldquo;David&rdquo;, &ldquo;male&rdquo;],
[&ldquo;Aaron&rdquo;, &ldquo;male&rdquo;]]</p>

<p>class TransparentRoster
  attr_accessor :participants</p>

<p>  def initialize(data)</p>

<pre><code>@participants = structify(data)
</code></pre>

<p>  end</p>

<p>  def sorted_names</p>

<pre><code>participants.collect { |person| person.name }.sort
</code></pre>

<p>  end</p>

<p>  def participant_list</p>

<pre><code>puts "This year's participants include:"
sorted_names.each { |name| puts name }
</code></pre>

<p>  end</p>

<p>  # here&rsquo;s where we turn the 2D array of data into struct objects</p>

<p>  Person = Struct.new(:name, :gender)</p>

<p>  def structify(data)</p>

<pre><code>data.collect { |pair| Person.new(pair[0], pair[1]) }
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>

<p>The TransparentRoster <code>Class</code> above takes a parameter called &lsquo;data&rsquo; &mdash; in this case, that data is coming in the form of a 2-dimensional array. It is immediately dealt with upon initialization, calling on a method named <code>structify(data)</code> that turns each <code>[name, gender]</code> pair from the given array into <code>Struct</code> objects that can be further dealt with via the <code>:participants</code> attr_accessor, and which respond to both <code>.name</code> and <code>.gender</code>.</p>

<p>In taking this approach, we were able to give the TransparentRoster class <em>mostly</em> the illusion of single-class responsibility (i.e technically, the Roster class shouldn&rsquo;t be responsible for, say, initializing new <code>Person</code>s; it should deal solely with duties that might sensibly pertain to a Roster like listing names, ordering them, etc). Furthermore, we were able to keep all of its methods small and single-purpose as well. Finally, the handling of raw data was kept limited to one place &mdash; the <code>structify(data)</code> method &mdash; so that if the given data were to change from a 2-dimensional array to a different structure, such as a hash, the code to extract the necessary data would only need to be altered in one place. All other method dependencies could remain relatively unharmed.</p>

<p>I&rsquo;m curious to see in what other contexts and real-life code bases I might come across <code>Struct</code>s. So far, they seem like a great tool for managing single-class responsibility when you&rsquo;re not yet sure how many classes you ought to build or of what magnitude these classes should be for an evolving project. There&rsquo;s a lot left of POODR to read so maybe subsequent chapters will shed further light on this.</p>

<br>




<h4>KEY TAKEAWAYS</h4>


<ol>
<li>POODR is awesome.</li>
<li>A <code>Struct</code> is a convenient way to bundle together attributes without having to build out or commit to building a whole <code>Class</code>.</li>
<li><code>Struct</code>s can be included within <code>Class</code>es.</li>
<li>If done so, a <code>Struct</code> can help illuminate the given <code>Class</code>&rsquo;s &lsquo;single purpose&rsquo; by handling the extraneous stuff; this also keeps the <code>Class</code>&rsquo;s methods short and sweet.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Simple Tips/Lessons from Gem-Building]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/11/09/5-simple-tips-slash-lessons-from-gem-building/"/>
    <updated>2013-11-09T03:01:00-05:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/11/09/5-simple-tips-slash-lessons-from-gem-building</id>
    <content type="html"><![CDATA[<p>Two posts ago, I dropped a hint about a basic ruby gem I was trying to build. At the time, building one&rsquo;s own gem(s) seemed to be the <em>de rigueur</em> object of our collective fascination at Flatiron. I guess that&rsquo;s because we were all itching to start building things, and we hadn&rsquo;t yet begun to learn Rails.</p>

<p>So I&rsquo;m a little late to our gem-party, but I&rsquo;m so happy I gave it a go (better late than never, right? Cue: mental reminders about &lsquo;unrealistic self-expectations&rsquo;). Because inevitably, the thing you learn most about through the process of gem-building &mdash; as is the case with absolutely anything you&rsquo;ll ever build with code &mdash; is git.</p>

<p>Only joking.</p>

<p>But really, I did actually learn an unexpected amount more about git. And with that said, since everyone loves lists, here&rsquo;s a list of 5 simple tips and lessons from my personal experience with ruby gem-building:</p>

<br>




<h3>1. Just start with the RubyGems Guide. Like, seriously.</h3>


<p>Don&rsquo;t waste hours debating your starting point. Just start with the <a href="http://guides.rubygems.org/make-your-own-gem/">RubyGems Guide</a>. Having done precisely the opposite &mdash; I ditched the guide in favor of a Treehouse video tutorial then got confused and ended up coming back to the guide &mdash; I know now that the RubyGems Guide is actually the easiest thing to follow. It walks you through the process of building a simple &ldquo;Hello World!&rdquo; gem, and without having to worry much at all about project directories or structure, you can build and ship your first ruby gem in about 15 minutes.</p>

<h3>2. Then try a tutorial, like this one</h3>


<p>Once you&rsquo;ve familiarized yourself a bit with basic directory organization and in which directories stuff should go, you can then follow along with <a href="http://blog.teamtreehouse.com/how-to-build-a-ruby-gem-with-guest-sam-soffes">this Treehouse tutorial</a> to build your real gem. The main reason I suggest you wait until you&rsquo;ve practiced with the RubyGems Guide first before diving into a tutorial like this one is that the latter instructs you to run this simple command as your starting point:</p>

<p><code>bundle gem &lt;the name of your gem&gt;</code></p>

<p>This will perform a bit of magic for you &mdash; not unlike the Rails/DHH magic we have at our disposal with the <code>rails g scaffold &lt;the name of your project&gt;</code> command &mdash; and instantly create a bunch of directories with files that have placeholder text and stuff in them. While this might sound totally awesome, it can also be confusing to use this as your starting point because you won&rsquo;t know why things have been set up the way they have. Which is to say, it will be harder for you to customize stuff to suit your needs &mdash; because you won&rsquo;t know what&rsquo;s going to cause the whole thing to break and what&rsquo;s okay to change.</p>

<p>So build your directories and files from the ground up yourself first (following the RubyGems Guide), THEN take advantage of shortcuts like <code>bundle gem &lt;the name of your gem&gt;</code>.</p>

<h3>3. Don't forget, you're using git</h3>


<p>If you do go off of the <code>bundle gem</code> shortcut, be aware: it initializes a git repo in your project directory automatically.</p>

<p><img src="http://stephaniehoh.github.io/assets/screenshots/git_init_ruby_gems.png"></p>

<p>Yes. Look at the last line! <code>Initializing git repo...</code> it says. Somehow, I didn&rsquo;t pay attention to this detail, so later down the road when I pushed my first version of the gem up to rubygems then instantly realized I had to make an edit and push up a new version, I ran into a huge wall. I kept getting error messages that said something along the lines of &ldquo;[some_file_name, some_other_file_name] are not files&rdquo;. And I thought &ldquo;WHY??! WHAT DO YOU MEAN THEY AREN&rsquo;T FILES? I&rsquo;VE SAVED EVERYTHING, I CAN SEE THEM IN MY DIRECTORIES, THEY EXIST! OF COURSE THEY&rsquo;RE FILES!!&rdquo;</p>

<p>Well. Turns out, my computer wanted me to do a <code>git add .</code> and <code>git commit</code>  before I could proceed with pushing up new gem versions. This is because the <code>bundle gem &lt;the name of my gem&gt;</code> shortcut initialized a git repo for me, which meant I had to start tracking my changes. The fact that I&rsquo;d forgotten this and/or hadn&rsquo;t paid attention to the activity in my console from the get-go didn&rsquo;t change the fact that I now had to answer to git.</p>

<h3>4. Make sure your gem-name isn't already taken</h3>


<p>The problem I ran into above (and the subsequent 3 hours of de-bugging) was all due to this basic mistake: I&rsquo;d forgotten to make sure my gem name wasn&rsquo;t already taken. So after building everything and trying to run <code>gem push &lt;my gem&gt;</code>, I was promptly denied. This forced me to have to go back and make a lot of changes, including RENAMING MY GEM.</p>

<p>So just check first on RubyGems.org that your gem name hasn&rsquo;t already been taken! And don&rsquo;t assume, like I did, that it&rsquo;s necessarily something more complicated &mdash; like an error with my API-key (I ran around in circles trying to &lsquo;fix&rsquo; that for a while, when that was never the issue to begin with). It&rsquo;s really easy to get excited and just start building, and equally easy to jump to crazy conclusions as to where and how you should start debugging your errors.</p>

<h3>5. Handle your gemspec with care</h3>


<p>Your gemspec is not just some random file you can treat as an afterthought (as is often done unfortunately with README files, for example), just because it doesn&rsquo;t live in the &lsquo;all-important&rsquo; lib or bin directories. Your gemspec file is literally the roadmap TO YOUR GEM, or a blueprint, rather. It contains tons of valuable information such as your gem&rsquo;s version number, executables, and run-time dependencies, to name a few.</p>

<p>Furthermore, as you can see, when you actually run the <code>gem build &lt;yourgemname.gemspec&gt;</code> command to BUILD your gem, you have to build it off of the gemspec! It&rsquo;s just convention. Needless to say, your gemspec file is important. Update it, make sure it contains accurate information, and treat it with care.</p>

<p>================================================================</p>

<p>All of that said, I had a lot of fun building my first gem. Special shoutout to our TA Spencer Rogers for helping me de-bug and ultimately realize that my 3-hour roadblock had, in fact, stemmed 100% from git troubles.</p>

<p>My gem is called <code>billboard_chart</code>.</p>

<p>You can install it by running <code>gem install billboard_chart</code>.</p>

<p>Then simply type <code>billboard_chart</code> to see what happens!</p>

<p>(NOTE: 24 hours after I published my gem, Billboard.com decided to switch up some of their CSS selectors so now the scraper generating my data &mdash; I used Nokogiri &mdash; is acting funny, which means the data also looks a bit funny now. Looks like I now have some ACTUAL de-bugging to do!!!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Just Set It. Just Say It.]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/10/ruby-just-set-it-just-say-it/"/>
    <updated>2013-10-10T01:57:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/10/ruby-just-set-it-just-say-it</id>
    <content type="html"><![CDATA[<p>When we&rsquo;re fluent in a language, we take for granted everything about it that feels intuitive. Ever feel that way when asked something specific about English? Say you had to conjure up some intelligent explanation for why certain verbs conjugate irregularly while others don&rsquo;t. You&rsquo;d probably say something like, &ldquo;I don&rsquo;t know! I just know that they do. I&rsquo;ve always known. If you know English, it&rsquo;s like&hellip; intuitive.&rdquo;</p>

<p>You just know.</p>

<p>Well, until you decide to pick up a foreign language and start the language-learning process from scratch, you have no idea now valuable and hard-earned this intuition is. To have a SENSE of how a language works, how you can play by its rules but still bend it to your will and imagination&hellip; this is what fluency feels like. And it feels awesome, because you can really express yourself.</p>

<p>The alternative, of course, can feel really really frustrating &mdash; and this has been a prevalent feeling so far in my quest to learn to &lsquo;speak&rsquo; Ruby. Everything feels unnatural. I find myself writing most of my code out in the form of pseudo-code, wishfully hoping all the steps I&rsquo;ve typed out in plain English will magically transform themselves into Ruby. Come on, you mean the computer CAN&rsquo;T interpret that? WHY THE HELL NOT.</p>

<p>Anyway. Rather than throw a tantrum (and believe me, sometimes nothing sounds better than a good tantrum), I suppose it&rsquo;d be more productive for me to share a few Ruby intuition-isms (?) that I&rsquo;ve finally picked up on these last few days.</p>

<h3>HOW DO YOU DEAL WITH `.collect`?!</h3>


<p>By this, I don&rsquo;t mean how do you USE <code>.collect</code>, per se. Just to be clear though, <code>.collect</code> iterates over a data-structure (array or hash) and then, based on what else you&rsquo;ve told it to do in your code block, it returns a newly-generated array of all the affected, <code>.collect</code>ed items. Cool. What used to really puzzle me, however, was how the hell you further accessed and/or passed around the fruits of this <code>.collect</code>ed array&rsquo;s labors. For example, look at this (admittedly wonky-looking) method that uses `.collect':</p>

<p>``` ruby</p>

<h1>===== Apple-picker using &lsquo;.collect&rsquo; ======</h1>

<p>def apple_picker(array)
  array.collect do |fruit|</p>

<pre><code>fruit if fruit == "apple"
</code></pre>

<p>  end.compact
end</p>

<p>```</p>

<p>See how I tacked on a <code>.compact</code> LITERALLY on the end of the &lsquo;end&rsquo;? I know &mdash; IT LOOKS SO WEIRD. But the real point is, it looks like it&rsquo;s over once I wrap up my &lsquo;do&rsquo; and &lsquo;end&rsquo;. Kaput. No more access to whatever that entire block of code just returned. WHAT IF I WANTED TO DO MORE? Like, how can I make the <code>.collect</code>&rsquo;s return value a THING? Oh, #NBD. Avi finally drilled home for me today this concept: thats_what_variables_are_for = &ldquo;storing and pointing to things!&rdquo; So look. If I wanted to store the fruits of <code>.collect</code>&rsquo;s labor somewhere, I literally JUST SET THE WHOLE BLOCK AS = TO A VARIABLE. Like so:</p>

<p>``` ruby</p>

<h1>===== Apple-picker using &lsquo;.collect&rsquo; ======</h1>

<p>def apple_picker(array)
  some_variable = array.collect do |fruit|     # &lt;&mdash; LOOK! I JUST SET THE &lsquo;EQUAL TO&rsquo; BIT RIGHT HERE</p>

<pre><code>fruit if fruit == "apple"
</code></pre>

<p>  end.compact
end</p>

<p>```</p>

<p>That&rsquo;s it! It&rsquo;s that easy. And now, some_variable effectively &lsquo;houses&rsquo; the result of <code>.collect</code>.</p>

<p>Oh, and by the way &mdash; since <code>end.compact</code> looks silly, here the better way to write that using curly braces:</p>

<p>``` ruby</p>

<h1>===== Apple-picker using &lsquo;.collect&rsquo; ======</h1>

<p>def apple_picker(array)
  array.collect {|fruit| fruit if fruit == &ldquo;apple&rdquo;}.compact
end</p>

<p>```</p>

<br>




<h3>HOW DO YOU, LIKE, CHECK IF SOMETHING ALREADY EXISTS?</h3>


<p>This one was a huge epiphany for me. Like HUGE. Of epic proportion. Because NOT knowing this stumped me on basically every problem I had to solve that required &lsquo;leveling out&rsquo; my iteration. Look at this first attempt to organize a hash of pigeons, for example, without explicitly &lsquo;leveling out&rsquo;:</p>

<p>``` ruby</p>

<p>pigeon_list = {}</p>

<p>pigeon_names = []
pigeon_data.each do |descriptors, details_hash|
  pigeon_names = details_hash.each_value.collect do |name|</p>

<pre><code>name
</code></pre>

<p>  end.flatten.uniq
end</p>

<p>pigeon_data.each do |descriptors, details_hash|
  details_hash.each do |qualities, names_array|</p>

<pre><code>names_array.each do |name|
  if pigeon_names.include?(name)                      # &lt;-- THE ISSUE IS AROUND HERE
    pigeon_list[name] = {descriptors =&gt; qualities}
  end
end
</code></pre>

<p>  end
end</p>

<p>puts pigeon_list</p>

<p>```</p>

<p>In the above code, my iterator is ultimately only returning the last line of the block that&rsquo;s evaluated, over-writing data with each iteration &mdash; i.e, it keeps re-populating my hash with over-writes, rather than &lsquo;leveling out&rsquo; and catching all the data. The problem, I discovered, was that I NEEDED TO ACCOUNT FOR WHETHER OR NOT SOMETHING ALREADY EXISTS. And how do you do that? YOU JUST STATE IT. Here it is in action below, in the refactored solution:</p>

<p>``` ruby</p>

<p>pigeon_list = {}</p>

<p>pigeon_data.each do |property, property_hash|
  property_hash.each do |values, birds_array|</p>

<pre><code>birds_array.each do |name|
  if pigeon_list[name]                     # &lt;-- TO CHECK IF IT EXISTS? JUST STATE IT
    if pigeon_list[name][property]         # &lt;-- RIGHT HERE I ASK AGAIN IF SOMETHING EXISTS
      pigeon_list[name][property] &lt;&lt; values    
    else
      pigeon_list[name][property] = values     
    end
  else                                         
    pigeon_list[name] = {property =&gt; [values]} 
  end
end
</code></pre>

<p>  end
end</p>

<p>p pigeon_list</p>

<p>```</p>

<p>See how easy that is? Your instinct, based on English, might be to make up some random &lsquo;questions&rsquo; to ask the entity like <code>if pigeon_list[name].exists?</code> or <code>.already_exists?</code> &mdash; but THIS IS RUBY. You don&rsquo;t need to ask any questions. YOU LITERALLY JUST STATE THE ENTITY.</p>

<p>So simple. But mind still blown.</p>

<h4>KEY TAKEAWAYS</h4>


<ol>
<li>Ruby is a pretty English-y language, but it&rsquo;s not ACTUALLY English (so don&rsquo;t expect such)</li>
<li>To &lsquo;catch&rsquo; the return value(s) of a <code>.collect</code>, simply SET THE ENTIRE BLOCK AS EQUAL TO A VARIABLE (and now it lives in the variable!)</li>
<li>To &lsquo;level&rsquo; out your iteration and avoid re-populating with over-writes, you need to check if certain entities (i.e an array) exist already&hellip; and how to check? YOU JUST STATE THE ENTITY ITSELF</li>
</ol>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: methods | stephanie writes code]]></title>
  <link href="http://stephaniehoh.github.io/blog/categories/methods/atom.xml" rel="self"/>
  <link href="http://stephaniehoh.github.io/"/>
  <updated>2013-10-10T02:25:50-04:00</updated>
  <id>http://stephaniehoh.github.io/</id>
  <author>
    <name><![CDATA[Stephanie Oh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keeping Your Units of Work Manageable]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/09/keeping-your-units-of-work-manageable/"/>
    <updated>2013-10-09T00:33:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/09/keeping-your-units-of-work-manageable</id>
    <content type="html"><![CDATA[<p>The parallels between good (English) writing and good code continue to abound, and one that really stood out to me today was the idea that <strong>methods are like paragraphs</strong>.</p>

<p>Just think about it.</p>

<p>Any work of writing worth your dime (screenplays and plays don&rsquo;t really count in this example) &mdash; be it an op-ed piece, a serious article, or a novel &mdash; can be broken down into smaller and smaller units until you&rsquo;re staring at individual letters and punctuation marks. Now, a slightly more meaningful unit of work than individual letters and characters is a sentence, and I&rsquo;d say the next unit up after a sentence is by and large the most meaningful of all: the paragraph.</p>

<p>Aside from needing to be well-written in general, conceptually, good paragraphs should <strong>adhere to a single topic</strong>. That is the point of a paragraph: to broach, discuss, debate, or refute ONE MAIN IDEA. And if you find yourself babbling about new or irrelevant ideas, it&rsquo;s probably time for &mdash; you guessed it &mdash; a new paragraph. Paragraphs help us compartmentalize our thoughts so we can build upon them in a logical manner; they&rsquo;re kind of like lego pieces that we can eventually stack together to build something cool. Conversely, how could you build anything <em>without</em> these pieces?? I HAVE NO IDEA. How miffed would you be if you had to build a house with one massive brick? Or how pissed have I been when previous writing students submitted &ldquo;papers&rdquo; that were comprised of ONE MASSIVE BLOCK OF TEXT?</p>

<p>Paragraphs make your work &mdash; as both the writer AND the reader &mdash; more manageable. And I think this is such a key concept in writing code, as well.</p>

<p>Methods, like paragraphs, are units of work. And these units of work need to be kept manageable, so as to make your life as a programmer (and potential reader of other programmers' code) less painful. How are you going to debug effectively if you&rsquo;re staring at one massive block of code? How can you tell where your errors truly begin and end if your entire program depends on ONE GIANT CHAIN OF METHODS?? I don&rsquo;t know.</p>

<p>Even if you&rsquo;re still having a hard time grasping how crucial this idea is, or if you don&rsquo;t know the first thing about writing code, any layperson with a pair of eyes can see the stark differences between the following two examples of code.</p>

<h4>Here's the first version:</h4>


<p>``` ruby
class Jukebox
  attr_accessor :songs
  APPROVED_COMMANDS = [:list, :help, :exit]</p>

<p>  def initialize(songs)</p>

<pre><code>@songs = songs.collect {|s| Song.new(s)}
@on = true

def on?
  @on    
end

def help
  puts "Please select help, list, exit, or play."
  self.command_request
end

def command(input)
  if APPROVED_COMMANDS.include?(input.strip.downcase.to_sym)
    self.send(input)    
  elsif input.start_with?("play")
    song_request = input.split("play").last.strip
    self.play(song_request)
  else
    puts "Invalid command"
  end
end

def call
  while self.on?
    self.help
  end
end

def exit
  puts "Goodbye!"
  @on = false
end

def command_request   
  self.command(gets.strip)
end
</code></pre>

<p>  end
```</p>

<h4>Here's the second version (of the same program):</h4>


<p>``` ruby
class Jukebox
  attr_accessor :songs</p>

<p>  def initialize(songs)</p>

<pre><code>@songs = songs.sort
</code></pre>

<p>  end</p>

<p>  def call</p>

<pre><code>puts "Welcome to Pop Jukebox!"
puts "Enter a command to continue. Type 'help' for a list of commands."
exit = false
while exit == false do
  command = gets.strip.downcase

  case command
  when 'help'
    puts "Enter one of the following commands: help, play, list, exit"
    puts "\n"
  when 'list'
    puts self.songs
    puts "\n"
    puts "Type play to proceed"
    puts "\n"
  when 'play'
    puts "Would you like to play by song title or artist?"
    puts "\n"
    song_title_or_artist = gets.strip.downcase
    puts "\n"
    case song_title_or_artist
    when 'song title'
      puts list_song_titles
      puts "Please select a song"
      puts "\n"
      song_choice = gets.strip.downcase
      play_song_choice(song_choice)
    when 'artist'
      puts list_artists
      puts "Please select an artist"
      artist_choice = gets.strip.downcase
      list_artist_songs(artist_choice)
      song_choice = gets.strip.downcase
      play_song_choice(song_choice)
    else
      puts "Enter one of the following commands: help, play, list, exit"
    end
  when 'exit'
    puts "\n"
    puts "Goodbye! Nice to know ya."
    exit = true
  else 
    puts "Say whaaaaaa?"
  end
end
</code></pre>

<p>  end</p>

<p>  def list_artists</p>

<pre><code>artists = self.songs.collect do |song|
  song.split(" - ")[0]
end.uniq
</code></pre>

<p>  end</p>

<p>  def list_song_titles</p>

<pre><code>song_titles = self.songs.collect do |song|
  song.split(" - ")[1]
end.sort
</code></pre>

<p>  end</p>

<p>  def play_song_choice(song_choice)</p>

<pre><code>self.songs.select do |song|
  if song.split(" - ")[1].downcase == song_choice
    puts "Now playing #{song}!"
  end
end
</code></pre>

<p>  end</p>

<p>  def list_artist_songs(artist_choice)</p>

<pre><code>self.songs.select do |song|
  if song.split(" - ")[0].downcase == artist_choice
   # then just show that artist's song
   puts song.split(" - ")[1]
  end
end
puts "Select song"
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>I mean, just from a VISUAL standpoint, it doesn&rsquo;t take rocket science to see that one of the two versions seems to be less&hellip; verbose. It seems to rely on small, focused methods that each serve a single purpose and are accessed/called upon by other methods, when needed. This is achieved through something called <strong>method delegation</strong>, where methods pass responsibility along from one to the next, initiating different parts of the program swiftly and efficiently.</p>

<p>Of course, the responsibility of the fledgling Rubyist is to focus on &lsquo;making it work&rsquo; first, then worry about &lsquo;making it beautiful&rsquo;. But somehow, I think considering form and function both is a valuable approach as well. Because if you&rsquo;re thinking in small pieces, and you KNOW that writing code in small pieces is a good thing, then you should have no trouble&hellip; <em>writing code in small pieces</em>.</p>

<h4>KEY TAKEAWAYS</h4>


<ol>
<li>Methods are like paragraphs &mdash; give them one &lsquo;topic sentence&rsquo;, i.e function, at a time</li>
<li>A paper written as one big block of text is egregious&hellip; and so is code that relies on one unwieldy method</li>
<li>Make your methods small and focused &mdash; you can always call them in other methods!</li>
<li>Method delegation is your friend</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doing Things with Enumerables Using Verbs... Well, Methods]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/08/doing-things-with-enumerables-using-verbs-dot-dot-dot-well/"/>
    <updated>2013-10-08T03:28:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/08/doing-things-with-enumerables-using-verbs-dot-dot-dot-well</id>
    <content type="html"><![CDATA[<p>A big thing for me as I make the transition away from my former life as an English and writing instructor is to make sense of coding by relating it to familiar concepts by means of analogy.</p>

<p>So a big thing in Ruby is <b>methods</b>. Thus far, I&rsquo;ve been thinking about methods <b>as if they were verbs in English</b> &mdash; just like verbs describe actions, so methods let us act upon and DO things with objects.</p>

<p>Now, a particular type of object called <b>Enumerables</b> has caused me some grief this past week, as it seems you can call upon an Enumerable an infinite list of methods. What are some examples of Enumerables? Well, basically any data structure that holds data and is therefore useful in Ruby &mdash; two common ones being <b>arrays and hashes</b>. And thanks to David Grayson&rsquo;s Las Vegas Ruby Group presentation, <a href="https://speakerdeck.com/lvrug/rubys-enumerable-module-david-grayson">&ldquo;Ruby&rsquo;s Enumerable Module&rdquo;</a>, I now know that ranges, sets, String#chars, and String#bytes are also considered Enumerables.</p>

<p>Grayson&rsquo;s deck is pretty straightforward &mdash; no fluff, mostly examples of how an Enumerable might respond to or behave under a method. But this is great! Sometimes you get tired of consulting <a href="http://ruby-doc.org/core-2.0.0/">this</a> and it&rsquo;s nice to have found another source that really emphasizes <b>what the &lsquo;verbs&rsquo;, i.e methods, do</b>. Because let&rsquo;s face it. Without Enumerables and their corresponding methods, there&rsquo;s just&hellip; really not much else to do in Ruby. If you&rsquo;re not acting upon data by transforming/accessing/re-organizing/passing it around from one part of your program to another, then what are you doing? Right. And the only way you&rsquo;re going to accomplish any of the above is by taking advantage of all of Ruby&rsquo;s insane methods.</p>

<p>So the most prevalent Enumerable method that I&rsquo;d encountered way early on in my Ruby journey &mdash; dare I say the most <em>commonplace</em> or <em>well-known</em> method &mdash; is:</p>

<p><code>.each</code></p>

<p>Up until the end of last week, I tried to solve all my iteration problems using <code>.each</code>. And while the method does encompass the very spirit of iteration (how much more literal can it get than telling your program, &ldquo;I want you to consider <b>each</b> thing and do what I say to it&rdquo;???), relying on it for every scenario is like having one verb in your vocabulary and running around insisting that it should convey exactly what you mean, regardless of what it is you&rsquo;re trying to say (i.e &ldquo;play!&rdquo; to play, &ldquo;play!&rdquo; to eat, &ldquo;play!&rdquo; to sleep, &ldquo;play!&rdquo; to go home, &ldquo;play!&rdquo; to go to bed &mdash; WHY WON&rsquo;T ANYONE DO WHAT I ASK?!). It&rsquo;d be ludicrous.</p>

<p>So I expanded my Ruby vocabulary the tiniest bit and discovered a few more Enumerable iterators that are SUPER useful, including:</p>

<p><code>.collect</code> or <code>.map</code> (they do the same thing)<br>
and<br>
<code>.select</code></p>

<p>(to grasp how useful <code>.select</code> is, just take a look at <a href="https://gist.github.com/stephaniehoh/6871313">this Anagram exercise</a> I solved in class yesterday)</p>

<p>Finally, in the wee hours of this morning/night, Grayson has introduced me to a few more iterators and methods that seem potentially very useful (and I can&rsquo;t wait to try them out tomorrow):</p>

<p><code>.collect_concat</code><br>
<code>.cycle</code><br>
and<br>
<code>.group_by</code></p>

<p>The last one, <code>.group_by</code>, I&rsquo;m sure I&rsquo;ve come across before but probably forgot existed. Just being honest.</p>

<br>


<h4>KEY TAKEAWAYS</h4>


<ol>
<li>Methods are like verbs&hellip; you need to have a decent vocabulary of them, or else you&rsquo;ll be limited in how you can express yourself</li>
<li>Enumerables are pretty important in Ruby; they store data</li>
<li>Methods are also pretty important in Ruby; they let you access and manipulate the data stored in the Enumerables</li>
<li>Some cool iterators and methods you can call on Enumerables include:<br>
<code>.each</code><br>
<code>.collect</code> or <code>.map</code> (they do the same thing)<br>
<code>.select</code><br>
<code>.collect_concat</code><br>
<code>.cycle</code><br>
<code>.group_by</code></li>
</ol>

]]></content>
  </entry>
  
</feed>

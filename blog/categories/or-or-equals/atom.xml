<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: or-or-equals | stephanie writes code]]></title>
  <link href="http://stephaniehoh.github.io/blog/categories/or-or-equals/atom.xml" rel="self"/>
  <link href="http://stephaniehoh.github.io/"/>
  <updated>2013-10-23T11:50:00-04:00</updated>
  <id>http://stephaniehoh.github.io/</id>
  <author>
    <name><![CDATA[Stephanie Oh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring Using ||=]]></title>
    <link href="http://stephaniehoh.github.io/blog/2013/10/11/refactoring-using-%7C%7C-equals/"/>
    <updated>2013-10-11T10:14:00-04:00</updated>
    <id>http://stephaniehoh.github.io/blog/2013/10/11/refactoring-using-||-equals</id>
    <content type="html"><![CDATA[<p>I wanted to write up a short addendum to my previous post, &ldquo;Ruby: Just Set It. Just Say It&rdquo; and show you a simple example of refactoring.</p>

<p>What is refactoring, you ask?</p>

<p>In my mind, it&rsquo;s a little like editing your writing. Your first draft might be an incoherent mess, but at least you got your thoughts out. From there, it&rsquo;s your responsibility as a writer to clean up your work so that it best conveys what you mean to say FROM YOUR READERS' PERSPECTIVE. Likewise, refactoring your code is a kind of clean-up process. It shouldn&rsquo;t change your program&rsquo;s external behavior, i.e the final output shouldn&rsquo;t be changing, but HOW your program gets there should have effectively changed.</p>

<p>I guess this is a little different than editing your writing, in that the former is to better serve the consumer &mdash; the reader; refactoring code, on the other had, doesn&rsquo;t yield any new outcome to the consumer &mdash; the user. However, refactoring does make your code more readable to OTHER CODERS. Which can ultimately mean that future de-bugging efforts will be less painful. That, and you should take pride in your code! Make it as readable, logical, and elegant as possible &mdash; you wouldn&rsquo;t do any differently in your writing, would you??</p>

<p>With that said, here&rsquo;s a side-by-side comparison of my code for the pigeon organizer exercise, pre and post refactoring:</p>

<h4>PRE-REFACTORING, USING 'IF ELSE' LOGIC</h4>


<p>``` ruby</p>

<p>pigeon_list = {}</p>

<p>pigeon_data.each do |property, property_hash|
  property_hash.each do |values, birds_array|</p>

<pre><code>birds_array.each do |name|
  if pigeon_list[name]                     
    if pigeon_list[name][property]         
      pigeon_list[name][property] &lt;&lt; values    
    else
      pigeon_list[name][property] = values     
    end
  else                                         
    pigeon_list[name] = {property =&gt; [values]} 
  end
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<h4>POST-REFACTORING, USING THE ||= OPERATOR</h4>


<p>``` ruby</p>

<p>arranged_pigeon_hash = {}</p>

<p>pigeon_data.each do |attribute, value_hash|
  value_hash.each do |traits, names_array|</p>

<pre><code>names_array.each do |name|
  if arranged_pigeon_hash[name] ||= { attribute =&gt; [traits] }
    if arranged_pigeon_hash[name][attribute] ||= traits
      arranged_pigeon_hash[name][attribute] &lt;&lt; traits
    end
  end
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>The outcome is the same either way, but the refactored version saves me a few lines of code and ultimately captures the logic behind the solution better.</p>

<p>What the ||= operator does, in a nutshell, is evaluates whatever&rsquo;s on the LEFT side of the operator first. If that condition returns &lsquo;true&rsquo;, then the program proceeds to the next line of code, and so on. If the condition is &lsquo;false&rsquo;, then whatever&rsquo;s on the RIGHT side of the operator is assigned as the value of the left side.</p>

<p>Cool, right?!</p>

<h4>KEY TAKEAWAYS</h4>


<ol>
<li>Write code that works first. Then refactor it.</li>
<li>Refactoring should&rsquo;t change the final outcome of your program; it should just help your program get there more efficiently, and make your code more readable to OTHER CODERS</li>
<li>The ||= (&ldquo;or or equals&rdquo;) operator is a cool alternative to using &lsquo;if else&rsquo; logic, if you intend for some part of your program to handle new assignment (i.e values to keys, etc.)</li>
</ol>

]]></content>
  </entry>
  
</feed>
